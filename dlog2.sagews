def extract_bits(g, h, p):
    recoverable=0
    corder=p-1
    while corder>0 and corder%2==0:
        corder>>=1
        recoverable+=1

    p2=1
    p2compl=p-1
    recovered_d=0
    currentg=g
    for i in range(recoverable):
        p2old=p2
        p2*=2
        p2compl//=2
        testcase0=power_mod(power_mod(g, recovered_d, p), p2compl, p)
        #testcase1=power_mod(power_mod(g, recovered_d+p2old, p), p2compl, p)
        res=power_mod(h, (p-1)//p2, p)
        if res!=testcase0:
            recovered_d|=p2old
    return recovered_d, recoverable

p=50086168753211929499036376411586253080823051016121140870683637252497277853416996330825922105579980500813726243700526579532057676239902164133433619902973592603634802221917863733490586260424371984678256617010035368410348116030758775503541441135334887289634595930498706357826921598595409979552653771708347506686437417543571751498011407924662712553734848062489087169749356052788229004190262426752654561344074778951167295240815130616536331782019949618156108947563775182578449668452077049035453020995987766805719013947598148087609046376356884821470014252414760920490882698213498380157184324708663717820615535964441993543681
h=Mod(17736996649884328182590427370285572382433392768846678259975083374913068098045354024322677420614263084932648734712335764643652025377456068460291826482506785995702216850022213585603137808872465799250875415553865990989303779314840458690466247747316160520827166887753542780601174373741071359702341752267436701844361180484065117078131008552797474113807910853399760756207397532641324958933482224243126431092177119053443815932405783402229995267096787396600374470955301190394653467098879464182990217745371849637796543909040602724393623001219905830107753434589791199509217392640729322292623753542572873550376594068117033062171, p)
g=Mod(6, p)

flist=[ZZ(i^j) for i,j in list(factor(p-1)) if ZZ(i^j)<1000000000]
flist.append(2) #for dlog1
dlogs=[discrete_log(h^((p-1)//k), g^((p-1)//k)) for k in flist]

partial_mod=crt(dlogs, [_ for _ in flist])
partial_div=mul(flist)

recovered_d, recovered_bits=extract_bits(g, h, p)

d=recovered_d
if g^d!=h:
    bruterange=len("{:b}".format(p))-recovered_bits
    if bruterange>50:
        print "Setting range from {} to 50".format(bruterange)
        bruterange=50
    for i in xrange(1<<bruterange):
        d=ZZ(i<<recovered_bits)+recovered_d
        if Mod(d, partial_div)==partial_mod and g^d==h:
            print "found at index {}\nd={}".format(i, d)
            break

print "Found {} bits".format(len("{:b}".format(d))-recovered_bits)